<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="2" passed="1">
  <reporter-output>
    <line>
      <![CDATA[this is simple screenshot]]>
    </line>
    <line>
      <![CDATA[<a href='\Screenshots\Android_Pixel_3\2022-03-22-17-56-30\LoginTests\emptyInputsLogin.png'> <img src='\Screenshots\Android_Pixel_3\2022-03-22-17-56-30\LoginTests\emptyInputsLogin.png'height='200' width='200'/> </a>]]>
    </line>
  </reporter-output>
  <suite name="Suite" duration-ms="29851" started-at="2022-03-22T17:56:30 EET" finished-at="2022-03-22T17:57:00 EET">
    <groups>
    </groups>
    <test name="Test" duration-ms="29851" started-at="2022-03-22T17:56:30 EET" finished-at="2022-03-22T17:57:00 EET">
      <class name="tests.LoginTests">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:tests.LoginTests@66d1af89]" name="beforeSuite" is-config="true" duration-ms="4401" started-at="2022-03-22T17:56:26 EET" finished-at="2022-03-22T17:56:30 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeTest(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTests@66d1af89]" name="beforeTest" is-config="true" duration-ms="16739" started-at="2022-03-22T17:56:30 EET" finished-at="2022-03-22T17:56:47 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[Android]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Pixel_3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:tests.LoginTests@66d1af89]" name="beforeClass" is-config="true" duration-ms="12" started-at="2022-03-22T17:56:47 EET" finished-at="2022-03-22T17:56:47 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:tests.LoginTests@66d1af89]" name="beforeMethod" is-config="true" duration-ms="1139" started-at="2022-03-22T17:56:47 EET" finished-at="2022-03-22T17:56:48 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@66d1af89]" name="beforeMethod" is-config="true" duration-ms="217" started-at="2022-03-22T17:56:48 EET" finished-at="2022-03-22T17:56:48 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.emptyInputsLogin()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="emptyInputsLogin()[pri:0, instance:tests.LoginTests@66d1af89]" name="emptyInputsLogin" duration-ms="3417" started-at="2022-03-22T17:56:48 EET" finished-at="2022-03-22T17:56:52 EET">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Fill all required fieldsheklll] but found [Fill all required fields]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Fill all required fieldsheklll] but found [Fill all required fields]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1413)
at org.testng.Assert.assertEqualsImpl(Assert.java:149)
at org.testng.Assert.assertEquals(Assert.java:131)
at org.testng.Assert.assertEquals(Assert.java:655)
at org.testng.Assert.assertEquals(Assert.java:665)
at tests.LoginTests.emptyInputsLogin(LoginTests.java:80)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:673)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:220)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:945)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:193)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:808)
at org.testng.TestRunner.run(TestRunner.java:603)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
at org.testng.SuiteRunner.run(SuiteRunner.java:326)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
at org.testng.TestNG.runSuites(TestNG.java:1092)
at org.testng.TestNG.run(TestNG.java:1060)
at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[this is simple screenshot]]>
            </line>
            <line>
              <![CDATA[<a href='\Screenshots\Android_Pixel_3\2022-03-22-17-56-30\LoginTests\emptyInputsLogin.png'> <img src='\Screenshots\Android_Pixel_3\2022-03-22-17-56-30\LoginTests\emptyInputsLogin.png'height='200' width='200'/> </a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- emptyInputsLogin -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:tests.LoginTests@66d1af89]" name="afterMethod" is-config="true" duration-ms="0" started-at="2022-03-22T17:56:53 EET" finished-at="2022-03-22T17:56:53 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTests@66d1af89]" name="afterMethod" is-config="true" duration-ms="1238" started-at="2022-03-22T17:56:53 EET" finished-at="2022-03-22T17:56:54 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=emptyInputsLogin status=FAILURE method=LoginTests.emptyInputsLogin()[pri:0, instance:tests.LoginTests@66d1af89] output=this is simple screenshot]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:tests.LoginTests@66d1af89]" name="beforeMethod" is-config="true" duration-ms="639" started-at="2022-03-22T17:56:54 EET" finished-at="2022-03-22T17:56:55 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.LoginTests@66d1af89]" name="beforeMethod" is-config="true" duration-ms="5" started-at="2022-03-22T17:56:55 EET" finished-at="2022-03-22T17:56:55 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTests.successLogin()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="successLogin()[pri:0, instance:tests.LoginTests@66d1af89]" name="successLogin" duration-ms="2903" started-at="2022-03-22T17:56:55 EET" finished-at="2022-03-22T17:56:58 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- successLogin -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:tests.LoginTests@66d1af89]" name="afterMethod" is-config="true" duration-ms="0" started-at="2022-03-22T17:56:58 EET" finished-at="2022-03-22T17:56:58 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.LoginTests@66d1af89]" name="afterMethod" is-config="true" duration-ms="1702" started-at="2022-03-22T17:56:58 EET" finished-at="2022-03-22T17:57:00 EET">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=successLogin status=SUCCESS method=LoginTests.successLogin()[pri:0, instance:tests.LoginTests@66d1af89] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:tests.LoginTests@66d1af89]" name="afterClass" is-config="true" duration-ms="1" started-at="2022-03-22T17:57:00 EET" finished-at="2022-03-22T17:57:00 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:tests.LoginTests@66d1af89]" name="afterTest" is-config="true" duration-ms="1" started-at="2022-03-22T17:57:00 EET" finished-at="2022-03-22T17:57:00 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:tests.LoginTests@66d1af89]" name="afterSuite" is-config="true" duration-ms="53" started-at="2022-03-22T17:57:00 EET" finished-at="2022-03-22T17:57:00 EET">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- tests.LoginTests -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
